{"version":3,"sources":["components/Hashtag/Trending.js","components/Hashtag/GeoChart.js","components/Hashtag/Hashtag.js"],"names":["Trending","useContext","GlobalContext","city","country","setData","setTime","useState","placeError","setPlaceError","console","log","sessionData","window","sessionStorage","getItem","query","undefined","fetchAndSetData","d","JSON","parse","className","trends","filter","i","map","to","encodeURIComponent","name","index","GeoChart","mapData","toShow","getCode","value","trend","tweet_volume","color","size","data","tooltipBgColor","styleFunction","context","toret","fill","fillOpacity","countryValue","minValue","maxValue","stroke","strokeWidth","strokeOpacity","tooltipTextFunction","countryName","isoCode","Number","toString","fetchTrendData","tag","setTrendDetail","setFetchError","a","fetch","headers","method","body","stringify","response","ok","json","Hashtag","decodeURIComponent","parseTag","useParams","hashtag","selectedPlace","fetchError","place","setPlace","trendingLocations","trendDetail","useLayoutEffect","filterCity","useEffect","length","Helmet","content","property","t","onChange","e","target","selected","href","rel","changetoK","Page404"],"mappings":"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","file":"static/js/4.62399530.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { GlobalContext } from \"../../global\";\nimport { fetchAndSetData } from \"../Content/Content\";\nimport { Link } from \"react-router-dom\";\n\nfunction Trending() {\n  const { city, country, setData, setTime } = useContext(GlobalContext);\n  const [placeError, setPlaceError] = useState(null);\n  console.log(placeError);\n  \n  let sessionData = window.sessionStorage.getItem(\"data\");\n  if (sessionData === null) {\n    const query = city === undefined ? country : city;\n    fetchAndSetData(query, setData, setTime,setPlaceError);\n    sessionData = window.sessionStorage.getItem(\"data\");\n  }\n  const d = JSON.parse(sessionData);\n  if (d) {\n    return (\n      <>\n        <p className=\"tt-tag\">Trending Now</p>\n        <ul className=\"tt-trends\">\n          {d[0].trends\n            .filter((d, i) => i < 10)\n            .map((d) => (\n              <li key={d.index}>\n                <Link\n                  to={`/${country}${\n                    city === undefined ? \"\" : \"/\" + city\n                  }/trend/${window.encodeURIComponent(d.name)}`}\n                >\n                  {d.name}\n                </Link>\n              </li>\n            ))}\n        </ul>\n      </>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default Trending;\n","import React from \"react\";\nimport { WorldMap } from \"react-svg-worldmap\";\nimport { getCode } from \"country-list\";\n\nfunction GeoChart(mapData) {\n  if (mapData) {\n    const countryCode = mapData.mapData.filter(\n      (d) => getCode(d.name) !== undefined\n    );\n    var toShow = countryCode.map((d) => {\n      const country = getCode(d.name);\n      const value = d.trend.tweet_volume + 1;\n      return { country, value };\n    });\n  }\n\n  const toolTipFuntion = (countryName, isoCode, value) => {\n    let ret;\n    if(Number(value) === 1) {\n      ret= countryName.toString();\n    } else {\n      ret = countryName +' : ' + value;\n    }\n    return ret;\n  }\n\n  const stylingFunction = (context ) => {\n    const opacityLevel = 0.5 + (1.5 * (context.countryValue - context.minValue) / (2*context.maxValue - context.minValue))\n    const toret = {\n        // fill: context.country === \"US\" ? \"blue\" : context.color, \n        fill: '#017acd',\n        fillOpacity: opacityLevel, \n        stroke: \"black\", \n        strokeWidth: 1,\n        strokeOpacity: 1.5, \n    }\n    if(context.countryValue === 1){\n      toret.fill = \"#c0c0c0\";\n      return toret;\n    }\n    return toret;\n}\n  return (\n    <div className=\"App\">\n      <WorldMap\n        color=\"red\"\n        size=\"md\"\n        data={toShow}\n        tooltipBgColor=\"#017acd\"\n        styleFunction={stylingFunction}\n        tooltipTextFunction={toolTipFuntion}\n      />\n    </div>\n  );\n}\n\nexport default GeoChart;\n","import { useEffect, useState, useContext, useLayoutEffect } from \"react\";\nimport Helmet from \"react-helmet\";\nimport { useParams } from \"react-router\";\nimport { GlobalContext } from \"../../global\";\nimport \"./hashtag.css\";\nimport { HashLoader } from \"react-spinners\";\nimport Trending from \"./Trending\";\nimport GeoChart from \"./GeoChart\";\nimport Page404 from \"../404Page/Page404.js\";\nimport { changetoK } from \"../Content/Tweet\";\n\nfunction parseTag(tag) {\n  tag = window.decodeURIComponent(tag);\n  return tag;\n}\n\nconst fetchTrendData = async (tag, setTrendDetail, setFetchError) => {\n  try {\n    const response = await fetch(\n      \"https://trendsend.herokuapp.com/apis/trends/trend-details\",\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n        body: JSON.stringify({ trend: tag }),\n      }\n    );\n    console.log(response);\n    if (response.ok) {\n      const data = await response.json();\n      setTrendDetail(data.data);\n      setFetchError(null);\n    } else {\n      console.log(response);\n      throw response;\n    }\n  } catch (error) {\n    console.log(error);\n    setFetchError(error);\n  }\n};\n\nconst Hashtag = () => {\n  let params = useParams();\n  let tag = parseTag(params.hashtag);\n  const { city, country } = useContext(GlobalContext);\n  const selectedPlace = city === undefined ? country : city;\n  const [fetchError, setFetchError] = useState(null);\n  const [place, setPlace] = useState(selectedPlace);\n\n  const [trendDetail, setTrendDetail] = useState({ trendingLocations: [] });\n\n  useLayoutEffect(() => {\n    setPlace(place);\n  }, [place]);\n\n  const countryHandler = (e) => {\n    setPlace(e.target.value);\n  };\n  const filterCity = trendDetail.trendingLocations.filter(\n    (d) => d.name === place\n  );\n\n  useEffect(() => {\n    fetchTrendData(tag, setTrendDetail, setFetchError);\n  }, [tag, place]);\n\n  if (fetchError === null) {\n    if (trendDetail.trendingLocations.length >= 1) {\n      return (\n        <div className=\"hashtag\">\n          <Helmet>\n              <meta\n                name=\"description\"\n                content={`Find details abput Top trending hashtags in ${country} ${city}.`}\n              />\n              <meta\n                name=\"title\"\n                content={`Tweet Name is ${tag}`}\n              />\n\n              <meta property=\"og:type\" content=\"website\" />\n              <meta property=\"og:url\" content=\"https://alldaytrends.com/\" />\n              <meta\n                property=\"og:title\"\n                content={`This tweet is trending is these locations ${trendDetail.trendingLocations.map(t => t.name)}`}\n              />\n              <meta\n                property=\"og:description\"\n                content={`Total Number of tweets are ${filterCity[0]?.trend?.tweet_volume}`}\n              />\n              <meta property=\"og:image\" content=\"%PUBLIC_URL%/logo.png\" />\n\n              <meta property=\"twitter:card\" content=\"summary_large_image\" />\n              <meta\n                property=\"twitter:url\"\n                content=\"https://alldaytrends.com/\"\n              />\n              <meta\n                property=\"twitter:title\"\n                content={`This tweets is trending in ${trendDetail.trendingLocations.length} locations`}\n              />\n              <meta\n                property=\"twitter:description\"\n                content={`This tweets has the highest rank of ${filterCity[0]?.trend?.index}`}\n              />\n              <meta property=\"twitter:image\" content=\"%PUBLIC_URL%/logo.png\" />\n            <title>{tag}</title>\n          </Helmet>\n          <div className=\"hashtag-box\">\n            <div>\n              <h2 className=\"hash-line\">\n                Trending at\n                <span className=\"hash-index\">\n                  #{filterCity[0]?.trend?.index}\n                </span>\n                in\n                <select className=\"country-drop\" onChange={countryHandler}>\n                  {trendDetail.trendingLocations.map((t) => {\n                      return (\n                        <option selected={place === t.name} key={t.name}>\n                          {t.name}\n                        </option>\n                      );\n                  })}{\" \"}\n                </select>\n              </h2>\n              <div>\n                <a\n                  className=\"hashtag-name\"\n                  href={`https://twitter.com/search?q=${window.encodeURIComponent(\n                    tag\n                  )}&src=typed_query`}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {tag}\n                </a>\n              </div>\n              <div className=\"details\">\n                <div>\n                  <span className=\"details-1\">\n                    {filterCity[0]?.trend?.tweet_volume === 0\n                      ? \"N.A\"\n                      : changetoK(filterCity[0]?.trend?.tweet_volume)}\n                  </span>\n                  No. of Tweets\n                </div>\n                <div>\n                  <span className=\"details-1\">\n                    #{filterCity[0]?.trend?.index}\n                  </span>\n                  Highest Rank\n                </div>\n              </div>\n              <div className=\"tweet-location\">\n                <p>\n                  Tweeted in\n                  <span>{trendDetail.trendingLocations.length}</span>\n                  other locations.\n                </p>\n              </div>\n              <div>\n                {\" \"}\n                {/* <MapChart data={trendDetail.trendingLocations}  /> */}\n                <GeoChart mapData={trendDetail.trendingLocations} />{\" \"}\n                {/* <ReactTooltip>{mapContent}</ReactTooltip> */}{\" \"}\n              </div>\n            </div>\n          </div>\n          <div className=\"top-tweets-box\">\n            <Trending />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"hashtag\">\n          <Helmet>\n            <title>Please Wait</title>\n          </Helmet>\n          <div className=\"hash-loader\">\n            <HashLoader color=\"#017acd\" />\n          </div>\n        </div>\n      );\n    }\n  } else {\n    return <Page404 />;\n  }\n};\nexport default Hashtag;\n"],"sourceRoot":""}