{"version":3,"sources":["components/Hashtag/MapChart.js","components/Hashtag/Hashtag.js"],"names":["CodeMap","data","setTooltipContent","countryCode","filter","d","undefined","getCode","name","toShow","forEach","cCode","trend","tweet_volume","className","map","backgroundColor","zoomOnScroll","containerStyle","width","height","containerClassName","regionStyle","initial","fill","stroke","hover","cursor","selected","regionsSelectable","series","regions","values","scale","normalizeFunction","fetchTrendData","tag","setTrendDetail","a","fetch","headers","method","body","JSON","stringify","response","json","isAxiosError","console","log","Hashtag","urlencode","decode","replace","parseTag","useParams","hashtag","useContext","GlobalContext","city","country","selectedPlace","useState","place","setPlace","trendingLocations","trendDetail","useLayoutEffect","filterCity","useEffect","length","Helmet","index","onChange","e","target","value","t","MapChart","color"],"mappings":"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","file":"static/js/4.7a7b1d03.chunk.js","sourcesContent":["import React from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\n\nimport { getCode } from \"country-list\"; \n\n\nconst CodeMap = (data, {setTooltipContent}) => {\n  if(data){\n    const countryCode = data.data.filter((d) => getCode(d.name) !== undefined);\n    var toShow = {};\n    countryCode.forEach(d => {\n      const cCode = getCode(d.name);\n      toShow[cCode] = d.trend.tweet_volume;\n    })\n  }\n  return (\n    <div className='map-chart'>\n      <VectorMap\n        map={\"world_mill\"}\n        backgroundColor=\"transparent\" //change it to ocean blue: #0077be\n        zoomOnScroll={false}\n        containerStyle={{\n          width: \"100%\",\n          height: \"600px\"\n        }}\n        containerClassName=\"map\"\n        regionStyle={{\n          initial: {\n            fill: \"#e4e4e4\",\n            \"fill-opacity\": 0.9,\n            stroke: \"none\",\n            \"stroke-width\": 0,\n            \"stroke-opacity\": 0\n          },\n          hover: {\n            \"fill-opacity\": 0.8,\n            cursor: \"pointer\",\n          },\n          selected: {\n            fill: \"#000\" //color for the clicked country\n          },  \n        }}\n        regionsSelectable={false}\n        \n        series={{\n          regions: [\n            {\n              values: toShow, //this is your data\n              scale: [\"#146804\", \"#ff0000\"], //your color game's here\n              normalizeFunction: \"polynomial\"\n            }\n          ]\n        }}\n      />\n    </div>\n  );\n};\nexport default CodeMap;","import { useEffect, useState, useContext, useLayoutEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport { useParams } from 'react-router';\nimport urlencode from 'urlencode';\nimport {GlobalContext} from '../../global'\nimport './hashtag.css';\nimport MapChart from './MapChart';\nimport {HashLoader} from 'react-spinners';\n\n\nfunction parseTag(tag){\n    tag = urlencode.decode(tag);\n    if(tag[0] === '_'){\n        return tag.replace('_','#');\n    }\n    return tag;\n}\n\n\n\nconst fetchTrendData = async(tag,setTrendDetail) => {\n    try {\n        const response = await fetch('https://trendsend.herokuapp.com/trends/trend-details',{\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method : 'POST',\n            body : JSON.stringify({trend : tag})\n        })\n        const data = (await response.json())\n        setTrendDetail(data.data);\n    } catch (error) {\n        if(error.isAxiosError){\n            console.log(error);\n        }\n    }\n}\n\nconst Hashtag = () => {\n    let params = useParams();\n    let tag = parseTag(params.hashtag);\n    const {city,country} = useContext(GlobalContext);\n    const selectedPlace = city === undefined ? country : city;\n    const [place, setPlace] = useState(selectedPlace);\n    \n    const [trendDetail, setTrendDetail] = useState({trendingLocations: []});\n    console.log(trendDetail);\n\n    useLayoutEffect(() => {\n        setPlace(place)\n    },[place])\n\n    console.log(place);\n    \n    const countryHandler = (e) => {\n        setPlace(e.target.value);\n    }\n    const filterCity = trendDetail.trendingLocations.filter(d => d.name === place);\n    console.log(filterCity);\n\n    useEffect(() =>{\n        fetchTrendData(tag,setTrendDetail);\n    },[tag,place]);\n\n    if(trendDetail.trendingLocations.length > 1){\n        return (\n            <div className='hashtag'>\n            <Helmet>\n                <title>{tag}</title>\n            </Helmet>\n            <div className='hashtag-box'>\n                <div>\n                    <h2 className='hash-line'>Trending at <span className='hash-index'>#{filterCity[0]?.trend?.index}</span> in \n                        <select className='country-drop' onChange={countryHandler}>\n                            {trendDetail.trendingLocations.map(t => {\n                                if(t.trend.name === place){\n                                    return (\n                                        <option selected={true} key={t.name}>{t.name}</option>\n                                    )\n                                }\n                                return (\n                                        <option className='select-items' value={t.name} key={t.name}>{t.name}</option>\n                                )\n                            })}\n                        </select>\n                    </h2>\n                    <div>\n                    <h1 className='hashtag-name'>{tag}</h1>\n                    </div>\n                    <div className='details'>\n                        <div><span className='details-1'>{filterCity[0]?.trend?.tweet_volume === 0 ? 'N.A' : filterCity[0]?.trend?.tweet_volume}</span> No. of Tweets</div>\n                        <div><span className='details-1'>#{filterCity[0]?.trend?.index}</span> Highest Rank</div>\n                    </div>\n                    <div className='tweet-location'>\n                        <p>Tweeted in <span>{trendDetail.trendingLocations.length}</span> other locations.</p>\n                    </div>\n                    <div>\n                        <MapChart data={trendDetail.trendingLocations}  />\n                        {/* <ReactTooltip>{mapContent}</ReactTooltip> */}\n                    </div>\n                </div>\n            </div>\n            <div className='top-tweets-box'>\n            </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className='hashtag'>\n            <Helmet>\n                <title>Please Wait</title>\n            </Helmet>\n            <div className='hash-loader'>\n                <HashLoader color='#00a2f5' />\n            </div>\n            </div>\n        )\n    }\n\n}\nexport default Hashtag;"],"sourceRoot":""}