{"version":3,"sources":["components/Hashtag/Trending.js","components/Hashtag/GeoChart.js","components/Hashtag/Hashtag.js"],"names":["Trending","useContext","GlobalContext","city","country","setData","setTime","useState","setPlaceError","sessionData","window","sessionStorage","getItem","query","undefined","fetchAndSetData","d","JSON","parse","className","trends","filter","i","map","to","name","replace","index","GeoChart","mapData","toShow","getCode","value","trend","tweet_volume","color","size","data","tooltipBgColor","styleFunction","context","toret","fill","fillOpacity","countryValue","minValue","maxValue","stroke","strokeWidth","strokeOpacity","tooltipTextFunction","countryName","isoCode","Number","toString","fetchTrendData","tag","setTrendDetail","setFetchError","a","fetch","headers","method","body","stringify","response","ok","json","console","log","Hashtag","urlencode","decode","parseTag","useParams","hashtag","selectedPlace","fetchError","place","setPlace","trendingLocations","trendDetail","useLayoutEffect","x","filterCity","useEffect","length","Helmet","onChange","e","target","t","selected","Math","floor","statusText"],"mappings":"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","file":"static/js/4.9330dfc1.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { GlobalContext } from \"../../global\";\nimport { fetchAndSetData } from \"../Content/Content\";\nimport { Link } from \"react-router-dom\";\n\nfunction Trending() {\n  const { city, country, setData, setTime } = useContext(GlobalContext);\n  const [placeError, setPlaceError] = useState(null);\n  \n  let sessionData = window.sessionStorage.getItem(\"data\");\n  if (sessionData === null) {\n    const query = city === undefined ? country : city;\n    fetchAndSetData(query, setData, setTime,setPlaceError);\n    sessionData = window.sessionStorage.getItem(\"data\");\n  }\n  const d = JSON.parse(sessionData);\n  if (d) {\n    return (\n      <>\n        <p className=\"tt-tag\">Trending Now</p>\n        <ul className=\"tt-trends\">\n          {d[0].trends\n            .filter((d, i) => i < 10)\n            .map((d) => (\n              <li key={d.index}>\n                <Link\n                  to={`/${country}${\n                    city === undefined ? \"\" : \"/\" + city\n                  }/trend/${d.name.replace(/#/g, \"_\")}`}\n                >\n                  {d.name}\n                </Link>\n              </li>\n            ))}\n        </ul>\n      </>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default Trending;\n","import React from \"react\";\nimport { WorldMap } from \"react-svg-worldmap\";\nimport { getCode } from \"country-list\";\n\nfunction GeoChart(mapData) {\n  if (mapData) {\n    const countryCode = mapData.mapData.filter(\n      (d) => getCode(d.name) !== undefined\n    );\n    var toShow = countryCode.map((d) => {\n      const country = getCode(d.name);\n      const value = d.trend.tweet_volume + 1;\n      return { country, value };\n    });\n  }\n\n  const toolTipFuntion = (countryName, isoCode, value) => {\n    let ret;\n    if(Number(value) === 1) {\n      ret= countryName.toString();\n    } else {\n      ret = countryName +' : ' + value;\n    }\n    return ret;\n  }\n\n  const stylingFunction = (context ) => {\n    const opacityLevel = 0.5 + (1.5 * (context.countryValue - context.minValue) / (2*context.maxValue - context.minValue))\n    const toret = {\n        // fill: context.country === \"US\" ? \"blue\" : context.color, \n        fill: '#017acd',\n        fillOpacity: opacityLevel, \n        stroke: \"black\", \n        strokeWidth: 1,\n        strokeOpacity: 1.5, \n    }\n    if(context.countryValue === 1){\n      toret.fill = \"#c0c0c0\";\n      return toret;\n    }\n    return toret;\n}\n  return (\n    <div className=\"App\">\n      <WorldMap\n        color=\"red\"\n        size=\"lg\"\n        data={toShow}\n        tooltipBgColor=\"#017acd\"\n        styleFunction={stylingFunction}\n        tooltipTextFunction={toolTipFuntion}\n      />\n    </div>\n  );\n}\n\nexport default GeoChart;\n","import {useEffect, useState, useContext, useLayoutEffect} from 'react';\nimport Helmet from 'react-helmet';\nimport {useParams} from 'react-router';\nimport urlencode from 'urlencode';\nimport {GlobalContext} from '../../global'\nimport './hashtag.css';\nimport {HashLoader} from 'react-spinners';\nimport Trending from './Trending';\nimport GeoChart from './GeoChart';\n\n\nfunction parseTag(tag) {\n    tag = urlencode.decode(tag);\n    if (tag[0] === '_') {\n        return tag.replace('_', '#');\n    }\n    return tag;\n}\n\nfunction changetoK(x) {\n    if (x > 1000) {\n        return Math.floor(x / 1000) + \"k\";\n    }\n    return x;\n}\n\n\nconst fetchTrendData = async (tag, setTrendDetail,setFetchError) => {\n    try {\n        const response = await fetch('https://trendsend.herokuapp.com/apis/trends/trend-details', {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(\n                {trend: tag}\n            )\n        });\n        if (response.ok) {\n            const data = (await response.json())\n            setTrendDetail(data.data);\n            setFetchError(null);\n        } else {\n            console.log(response);\n            throw response;\n        }\n    } catch (error) {\n        console.log(error);\n        setFetchError(error)\n    }\n}\n\nconst Hashtag = () => {\n    let params = useParams();\n    let tag = parseTag(params.hashtag);\n    const {city, country} = useContext(GlobalContext);\n    const selectedPlace = city === undefined ? country : city;\n    const [fetchError, setFetchError] = useState(null);\n    const [place, setPlace] = useState(selectedPlace);\n\n    const [trendDetail, setTrendDetail] = useState({trendingLocations: []});\n\n    useLayoutEffect(() => {\n        setPlace(place)\n    }, [place])\n\n    const countryHandler = (e) => {\n        setPlace(e.target.value);\n    }\n    const filterCity = trendDetail.trendingLocations.filter(d => d.name === place);\n\n    useEffect(() => {\n        fetchTrendData(tag, setTrendDetail, setFetchError);\n    }, [tag, place]);\n\n    console.log(fetchError);\n\n    if (fetchError === null) {\n        if (trendDetail.trendingLocations.length > 1) {\n            return (\n                <div className='hashtag'>\n                    <Helmet>\n                        <title>{tag}</title>\n                    </Helmet>\n                    <div className='hashtag-box'>\n                        <div>\n                            <h2 className='hash-line'>Trending at\n                                <span className='hash-index'>#{\n                                    filterCity[0] ?. trend ?. index\n                                }</span>\n                                in\n                                <select className='country-drop'\n                                    onChange={countryHandler}>\n                                    {\n                                    trendDetail.trendingLocations.map(t => {\n                                        if (t.trend.name === place) {\n                                            return (\n                                                <option selected={true}\n                                                    key={\n                                                        t.name\n                                                }>\n                                                    {\n                                                    t.name\n                                                }</option>\n                                            )\n                                        }\n                                        return (\n                                            <option className='select-items'\n                                                value={\n                                                    t.name\n                                                }\n                                                key={\n                                                    t.name\n                                            }>\n                                                {\n                                                t.name\n                                            }</option>\n                                        )\n                                    })\n                                } </select>\n                            </h2>\n                            <div>\n                                <h1 className='hashtag-name'>\n                                    {tag}</h1>\n                            </div>\n                            <div className='details'>\n                                <div>\n                                    <span className='details-1'>\n                                        {\n                                        filterCity[0] ?. trend ?. tweet_volume === 0 ? 'N.A' : changetoK(filterCity[0] ?. trend ?. tweet_volume)\n                                    }</span>\n                                    No. of Tweets</div>\n                                <div>\n                                    <span className='details-1'>#{\n                                        filterCity[0] ?. trend ?. index\n                                    }</span>\n                                    Highest Rank</div>\n                            </div>\n                            <div className='tweet-location'>\n                                <p>Tweeted in\n                                    <span>{\n                                        trendDetail.trendingLocations.length\n                                    }</span>\n                                    other locations.</p>\n                            </div>\n                            <div> {/* <MapChart data={trendDetail.trendingLocations}  /> */}\n                                <GeoChart mapData={\n                                    trendDetail.trendingLocations\n                                }/> {/* <ReactTooltip>{mapContent}</ReactTooltip> */} </div>\n                        </div>\n                    </div>\n                    <div className='top-tweets-box'>\n                        <Trending/>\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <div className='hashtag'>\n                    <Helmet>\n                        <title>Please Wait</title>\n                    </Helmet>\n                    <div className='hash-loader'>\n                        <HashLoader color='#017acd'/>\n                    </div>\n                </div>\n            )\n        }\n    } else {\n        return (<>\n            <h1>{fetchError?.statusText}</h1>\n                <div className='top-tweets-box'>\n                        <Trending/>\n                </div>\n            </>\n            )\n    }\n\n}\nexport default Hashtag;\n"],"sourceRoot":""}