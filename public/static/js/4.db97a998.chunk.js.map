{"version":3,"sources":["components/Hashtag/Trending.js","components/Hashtag/GeoChart.js","components/Hashtag/Hashtag.js"],"names":["Trending","useContext","GlobalContext","city","country","setData","setTime","sessionData","window","sessionStorage","getItem","query","undefined","fetchAndSetData","d","JSON","parse","trendData","Object","values","console","log","className","trends","map","name","index","GeoChart","mapData","toShow","filter","getCode","value","trend","tweet_volume","color","value-suffix","size","data","fetchTrendData","tag","setTrendDetail","a","fetch","headers","method","body","stringify","response","json","isAxiosError","Hashtag","urlencode","decode","replace","parseTag","useParams","hashtag","selectedPlace","useState","place","setPlace","trendingLocations","trendDetail","useLayoutEffect","filterCity","useEffect","length","Helmet","onChange","e","target","t","selected"],"mappings":"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","file":"static/js/4.db97a998.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport { GlobalContext } from '../../global'\nimport {fetchAndSetData} from '../Content/Content';\n\n\nfunction Trending() {\n    const {city,country,setData, setTime} = useContext(GlobalContext);\n    let sessionData = window.sessionStorage.getItem('data');\n    if(sessionData === null){\n        const query = city === undefined ? country : city;\n        fetchAndSetData(query,setData,setTime);\n        sessionData = window.sessionStorage.getItem('data');\n    }\n    const d = JSON.parse(sessionData);\n    const trendData  = Object.values(d);\n    console.log(trendData[1]);\n    if(trendData){\n        return (\n            <div className='trending-container'>\n                <p>Trending Now</p>      \n                <ul>\n                   {trendData[1].trends.map(d => <li key={d.index} >{d.name}</li>)}\n                </ul>      \n            </div>\n        )\n    } else {\n        return null\n    }\n    \n}\n\nexport default Trending\n","import React from \"react\"\nimport { WorldMap } from \"react-svg-worldmap\";\nimport { getCode } from \"country-list\";\n\nfunction GeoChart(mapData) {\n    console.log(mapData)\n    if(mapData) {\n    const countryCode = mapData.mapData.filter((d) => getCode(d.name) !== undefined);\n    var toShow = countryCode.map(d => {\n        const country = getCode(d.name);\n        const value =  d.trend.tweet_volume;\n        return {country,value};\n    })\n    console.log(toShow);\n}\n\n  return (\n    <div className=\"App\" >\n       <WorldMap color=\"red\"  value-suffix=\"people\" size=\"lg\" data={toShow} />\n    </div>\n  )\n}\n\nexport default GeoChart;","import { useEffect, useState, useContext, useLayoutEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport { useParams } from 'react-router';\nimport urlencode from 'urlencode';\nimport {GlobalContext} from '../../global'\nimport './hashtag.css';\nimport {HashLoader} from 'react-spinners';\nimport Trending from './Trending';\nimport GeoChart from './GeoChart';\n\n\nfunction parseTag(tag){\n    tag = urlencode.decode(tag);\n    if(tag[0] === '_'){\n        return tag.replace('_','#');\n    }\n    return tag;\n}\n\n\n\nconst fetchTrendData = async(tag,setTrendDetail) => {\n    try {\n        const response = await fetch('https://trendsend.herokuapp.com/trends/trend-details',{\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method : 'POST',\n            body : JSON.stringify({trend : tag})\n        })\n        const data = (await response.json())\n        setTrendDetail(data.data);\n    } catch (error) {\n        if(error.isAxiosError){\n            console.log(error);\n        }\n    }\n}\n\nconst Hashtag = () => {\n    let params = useParams();\n    let tag = parseTag(params.hashtag);\n    const {city,country} = useContext(GlobalContext);\n    const selectedPlace = city === undefined ? country : city;\n    const [place, setPlace] = useState(selectedPlace);\n    \n    const [trendDetail, setTrendDetail] = useState({trendingLocations: []});\n\n    useLayoutEffect(() => {\n        setPlace(place)\n    },[place])\n\n    const countryHandler = (e) => {\n        setPlace(e.target.value);\n    }\n    const filterCity = trendDetail.trendingLocations.filter(d => d.name === place);\n\n    useEffect(() =>{\n        fetchTrendData(tag,setTrendDetail);\n    },[tag,place]);\n\n    if(trendDetail.trendingLocations.length > 1){\n        return (\n            <div className='hashtag'>\n            <Helmet>\n                <title>{tag}</title>\n            </Helmet>\n            <div className='hashtag-box'>\n                <div>\n                    <h2 className='hash-line'>Trending at <span className='hash-index'>#{filterCity[0]?.trend?.index}</span> in \n                        <select className='country-drop' onChange={countryHandler}>\n                            {trendDetail.trendingLocations.map(t => {\n                                if(t.trend.name === place){\n                                    return (\n                                        <option selected={true} key={t.name}>{t.name}</option>\n                                    )\n                                }\n                                return (\n                                        <option className='select-items' value={t.name} key={t.name}>{t.name}</option>\n                                )\n                            })}\n                        </select>\n                    </h2>\n                    <div>\n                    <h1 className='hashtag-name'>{tag}</h1>\n                    </div>\n                    <div className='details'>\n                        <div><span className='details-1'>{filterCity[0]?.trend?.tweet_volume === 0 ? 'N.A' : filterCity[0]?.trend?.tweet_volume}</span> No. of Tweets</div>\n                        <div><span className='details-1'>#{filterCity[0]?.trend?.index}</span> Highest Rank</div>\n                    </div>\n                    <div className='tweet-location'>\n                        <p>Tweeted in <span>{trendDetail.trendingLocations.length}</span> other locations.</p>\n                    </div>\n                    <div>\n                        {/* <MapChart data={trendDetail.trendingLocations}  /> */}\n                        <GeoChart mapData={trendDetail.trendingLocations}/>\n                        {/* <ReactTooltip>{mapContent}</ReactTooltip> */}\n                    </div>\n                </div>\n            </div>\n            <div className='top-tweets-box'>\n                <Trending />\n            </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className='hashtag'>\n            <Helmet>\n                <title>Please Wait</title>\n            </Helmet>\n            <div className='hash-loader'>\n                <HashLoader color='#017acd' />\n            </div>\n            </div>\n        )\n    }\n\n}\nexport default Hashtag;"],"sourceRoot":""}